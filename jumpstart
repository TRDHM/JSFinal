#!/bin/bash
shopt -s expand_aliases #needed to make aliases work


Help()
{
	echo "Options"
	printf "%s\\n" "List       | lists all available services, their type, and a short description"
	printf "%s\\n" "Status     | shows status of all installed Kubernetes services through the Kubernetes dashboard"
	printf "%s\\n" "Help       | display this list again"
	printf "%s\\n" "Install    | install and deploy service"
	printf "%s\\n" "Uninstall  | uninstall a deployed service"

}

ColorGreen(){
	echo -ne $green$1$clear
}

ColorBlue(){
	echo -ne $blue$1$clear
}


List()
{

	column -t -s "	" services.txt
}

Install() {

	echo -ne "
        JUMPSTART MENU
        $(ColorGreen '1)') Wordpress
        $(ColorGreen '2)') MySQL
        $(ColorGreen '3)') GitLab 
        $(ColorGreen '4)') Kubeapps
        $(ColorGreen '0)') Exit "
        echo ""        
		read a
                case $a in
                        1) Wordpress ;;
                        2) MySQL;;
                        3) GitLab;;
                        4) Kubeapps;;
                        0) exit 0 ;;
                        *) echo -e $red"Wrong option."$clear;Help;;
                esac
}

Wordpress() {
	echo "This may take a few minutes, get some coffee."
	gnome-terminal -- sh -c 'helm install my-wp bitnami/wordpress'
	#wait for pod to be ready before running tunnel, etc
	sleep 30
	sudo -b gnome-terminal -- sh -c 'minikube tunnel' #runs tunnel in a new tab to avoid verbose junk
	echo "Please leave the new tab open, its important to accessing your WordPress instance."
	echo "You can reach your Wordpress installation at $(minikube service my-wp-wordpress --url)"
	echo "Username: user"
	echo "Password: $(kubectl get secret --namespace default my-wp-wordpress -o jsonpath="{.data.wordpress-password}" | base64 --decode)"
	
	#Adds installation to the installed file
	sed -i '1s/^/ my-wp-wordpress \n/' installed.txt 
}

MySQL() {
	
	echo "This may take a few minutes, get some m&m's."
	gnome-terminal -- sh -c 'helm install mysql bitnami/mysql'
	#need to wait for pod ready, otherwise secret etc won't exist
	while [[ $(kubectl get pods mysql -o 'jsonpath={..status.conditions[?@.type=="Ready")].status}') != "True" ]]; do 
	clear; echo "waiting for pod" && sleep 10; done
  
	ROOT_PASSWORD=$(kubectl get secret --namespace default mysql -o jsonpath="{.data.mysql-root-password}" | base64 --decode)
	#helm upgrade --namespace default mysql bitnami/mysql --set auth.rootPassword=$ROOT_PASSWORD 
	kubectl run mysql-client --rm --tty -i --restart='Never' --image docker.io/bitnami/mysql:8.0.27-debian-10-r35 --namespace default --command -- bash
	MYSQL_ROOT_PASSWORD=$(kubectl get secret --namespace default mysql -o jsonpath="{.data.mysql-root-password}" | base64 --decode)
	alias sqlCONNECT='mysql -h mysql.default.svc.cluster.local -uroot -p $MYSQL_ROOT_PASSWORD'
	echo "Interact with MySQL with the command  sqlCONNECT"
	echo "my-mysql" >> installed.txt 
}

GitLab(){
	helm repo add gitlab https://charts.gitlab.io/ &
	echo "glInstall"
	echo "This may take a few minutes, make youself a bagel."
	gnome-terminal -- sh -c 'helm install my-gitlab gitlab/gitlab' 
	echo "my-gitlab" >> installed.txt 
}


Kubeapps(){
	helm repo add bitnami https://charts.bitnami.com/bitnami &
	echo "This may take a few minutes, make youself some tea."
	kubectl create namespace kubeapps &
	helm install Kubeapps --namespace Kubeapps bitnami/kubeapps &
	kubectl create serviceaccount kubeapps-operator &
	kubectl create clusterrolebinding kubeapps-operator --clusterrole=cluster-admin --serviceaccount=default:kubeapps-operator &
	KAapi = kubectl get secret $(kubectl get serviceaccount kubeapps-operator -o jsonpath='{.secrets[].name}') -o jsonpath='{.data.token}' | base64 --decode
	echo "You can access your web gui with API token $KAapi"
	kubectl port-forward -n kubeapps svc/kubeapps 8080:80 &
	echo "Kubeapps" >> installed.txt 
}

Uninstall()
{
	echo "Installed Services"
	while read p; do
  	echo "$p"
	done <installed.txt

	mapfile -t installed < installed.txt
	installed+=( "Exit" )

	select selection in "${installed[@]}"; do
	  if [[ $REPLY == "0" ]]; then
        	echo 'No Services Currently Installed' >&2
        	exit
    	else
       		echo $REPLY $installed
		echo "0) exit 0 ;;"
          break
    	 fi
	done

	sed -i '/$uName/d' ./installed.txt
	helm uninstall $uName
	echo "$uName was uninstalled"

}

Status(){
 gnome-terminal -- sh -c 'minikube dashboard' 
}

Menu(){
	
	echo -ne "
	JUMPSTART MENU
	$(ColorGreen '1)') List
	$(ColorGreen '2)') Status
	$(ColorGreen '3)') Help 
	$(ColorGreen '4)') Install
	$(ColorGreen '5)') Uninstall
	$(ColorGreen '0)') Exit
	$(ColorBlue 'Choose an option:') "
        	read a
        	case $a in
	        	1) List ; Menu ;;
	        	2) Status ; Menu ;;
	        	3) Help ; Menu ;;
	        	4) Install ; Menu ;;
	        	5) Uninstall ; Menu ;;
			0) exit 0 ;;
			*) echo -e $red"Wrong option."$clear;Help;;
        	esac
}

while true 
do
 Menu
done
